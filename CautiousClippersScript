local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Catious Clippers",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "DarkBlue", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Cautious Clippers"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
local Tab = Window:CreateTab("HairCuts", 4483362458) -- Title, Image
local Section = Tab:CreateSection("AutoFarm")
local Button = Tab:CreateButton({
   Name = "Auto Haircut (CANT TURN OFF)",
   Callback = function()
   -- The function that takes place when the button is pressed
  -- Define part name
local partName = "AudioHolder"

-- Function to remove all parts with the specified name
local function removeAllParts()
    for _, part in pairs(workspace:GetChildren()) do
        if part:IsA("BasePart") and part.Name == partName then
            part:Destroy()
            print("Deleted: " .. partName)
        end
    end
end

-- Define arguments for the server event
local args = {
    [1] = "ValidateStylingMiniGame",
    [2] = 4,
    [3] = "Green"
}

-- Get the server event
local serverEvent = game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("EventManagerClient"):WaitForChild("ServerEvent")

-- Main loop
while wait(0.5) do
    removeAllParts()
    serverEvent:FireServer(unpack(args))
end

   end,
})

local Tab = Window:CreateTab("Crates", 4483362458) -- Title, Image
local Section = Tab:CreateSection("Premium")
local Button = Tab:CreateButton({
   Name = "Give Squid Crate",
   Callback = function()
   -- The function that takes place when the button is pressed
   local args = {
    [1] = "BuyCrateWithCash",
    [2] = "Special",
    [3] = "Premium",
    [4] = 999,
    [5] = 1
}

game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("FunctionManagerClient"):WaitForChild("ServerFunction"):InvokeServer(unpack(args))
   end,
   })
local Tab = Window:CreateTab("Areas", 4483362458) -- Title, Image
local Section = Tab:CreateSection("Doors")
local Button = Tab:CreateButton({
   Name = "Open All",
   Callback = function()
   -- The function that takes place when the button is pressed
local doorIDs = {"1", "3", "2"}

for _, doorID in ipairs(doorIDs) do
    local args = {
        [1] = "UnlockDoor",
        [2] = doorID,
        [3] = 1,
        [4] = 4
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Modules")
        :WaitForChild("FunctionManagerClient")
        :WaitForChild("ServerFunction")
        :InvokeServer(unpack(args))
end
    end,
    })
Rayfield:LoadConfiguration()
